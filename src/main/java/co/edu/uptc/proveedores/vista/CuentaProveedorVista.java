/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.uptc.proveedores.vista;

import co.edu.uptc.proveedores.controlador.ControladorPrincipal;
import co.edu.uptc.proveedores.modelo.Cuenta;
import co.edu.uptc.proveedores.modelo.CuentaProveedor;
import co.edu.uptc.proveedores.modelo.CuentaProveedorId;
import co.edu.uptc.proveedores.modelo.Plan;
import co.edu.uptc.proveedores.modelo.Producto;
import co.edu.uptc.proveedores.modelo.Proveedor;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author fredy
 */
public class CuentaProveedorVista extends javax.swing.JPanel {
    
    private DefaultTableModel modelCuentasProveedores;

    /**
     * Creates new form CuentaProveedorVista
     */
    public CuentaProveedorVista(ControladorPrincipal controladorPrincipal) {
        initComponents();
        this.initActions(controladorPrincipal);
        this.modelCuentasProveedores = new DefaultTableModel();
        this.modelCuentasProveedores.setColumnIdentifiers(new String[]{
            "Proveedor", "Cuenta", "Plan", "Producto"
        });
        this.tableCuentasProveedores.setModel(modelCuentasProveedores);
    }
    
    private void initActions(ControladorPrincipal controladorPrincipal) {
        this.btnActualizar.addActionListener(controladorPrincipal);
        this.btnAgregar.addActionListener(controladorPrincipal);
        this.btnConsultar.addActionListener(controladorPrincipal);
        this.btnEliminar.addActionListener(controladorPrincipal);
        this.btnActualizar.setActionCommand(ControladorPrincipal.ACCION_ACTUALIZAR_CUENTA_PROVEEDOR);
        this.btnAgregar.setActionCommand(ControladorPrincipal.ACCION_AGREGAR_CUENTA_PROVEEDOR);
        this.btnConsultar.setActionCommand(ControladorPrincipal.ACCION_CONSULTAR_CUENTA_PROVEEDOR);
        this.btnEliminar.setActionCommand(ControladorPrincipal.ACCION_ELIMINAR_CUENTA_PROVEEDOR);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblProveedor = new javax.swing.JLabel();
        inputProveedor = new javax.swing.JComboBox<>();
        lblCuenta = new javax.swing.JLabel();
        inputCuenta = new javax.swing.JComboBox<>();
        lblPlan = new javax.swing.JLabel();
        inputPlan = new javax.swing.JComboBox<>();
        lblProducto = new javax.swing.JLabel();
        inputProducto = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        btnAgregar = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCuentasProveedores = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CUENTA PROVEEDOR");

        lblProveedor.setText("Proveedor:");

        lblCuenta.setText("Cuenta:");

        lblPlan.setText("Plan:");

        lblProducto.setText("Producto:");

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        btnAgregar.setText("Agregar");
        jPanel1.add(btnAgregar);

        btnConsultar.setText("Consultar");
        jPanel1.add(btnConsultar);

        btnActualizar.setText("Actualizar");
        jPanel1.add(btnActualizar);

        btnEliminar.setText("Eliminar");
        jPanel1.add(btnEliminar);

        tableCuentasProveedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableCuentasProveedores);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                            .addComponent(lblCuenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPlan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputProveedor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputCuenta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputPlan, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputProducto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputProveedor)
                    .addComponent(lblProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputCuenta)
                    .addComponent(lblCuenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputPlan)
                    .addComponent(lblPlan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputProducto)
                    .addComponent(lblProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<Cuenta> inputCuenta;
    private javax.swing.JComboBox<Plan> inputPlan;
    private javax.swing.JComboBox<Producto> inputProducto;
    private javax.swing.JComboBox<Proveedor> inputProveedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCuenta;
    private javax.swing.JLabel lblPlan;
    private javax.swing.JLabel lblProducto;
    private javax.swing.JLabel lblProveedor;
    private javax.swing.JTable tableCuentasProveedores;
    // End of variables declaration//GEN-END:variables

    public CuentaProveedor getCuentaProveedor() {
        CuentaProveedorId id = new CuentaProveedorId();
        Object cuenta = this.inputCuenta.getSelectedItem();
        if (cuenta != null) {
            id.setCodigoCuenta(((Cuenta) cuenta).getCodigo());
        }
        
        Object proveedor = this.inputProveedor.getSelectedItem();
        if (proveedor != null) {
            id.setCodigoProveedor(((Proveedor) proveedor).getCodigo());
        }
        
        CuentaProveedor cuentaProveedor = new CuentaProveedor();
        cuentaProveedor.setId(id);
        Object producto = this.inputProducto.getSelectedItem();
        if (producto != null) {
            cuentaProveedor.setProducto((Producto) producto);
        }
        Object plan = this.inputPlan.getSelectedItem();
        if (plan != null) {
            cuentaProveedor.setPlan((Plan) plan);
        }
        return cuentaProveedor;
    }
    
    public void limpiarFormulario() {
        this.inputCuenta.setSelectedItem(null);
        this.inputPlan.setSelectedItem(null);
        this.inputProducto.setSelectedItem(null);
        this.inputProveedor.setSelectedItem(null);
    }
    
    public void setCuentaProveedor(CuentaProveedor cuentaProveedor) {
        Integer cuentaId = cuentaProveedor.getId().getCodigoCuenta();
        if (cuentaId != null) {
            Cuenta cuenta;
            for (int i = 0; i < this.inputCuenta.getItemCount(); i++) {
                cuenta = this.inputCuenta.getItemAt(i);
                if (cuenta != null && cuenta.getCodigo().equals(
                        cuentaProveedor.getId().getCodigoCuenta())) {
                    this.inputCuenta.setSelectedIndex(i);
                    break;
                }
            }
            
        } else {
            this.inputCuenta.setSelectedItem(null);
        }
        
        Integer proveedorId = cuentaProveedor.getId().getCodigoProveedor();
        if (proveedorId != null) {
            Proveedor proveedor;
            for (int i = 0; i < this.inputProveedor.getItemCount(); i++) {
                proveedor = this.inputProveedor.getItemAt(i);
                if (proveedor != null && proveedor.getCodigo().equals(
                        cuentaProveedor.getId().getCodigoProveedor())) {
                    this.inputProveedor.setSelectedIndex(i);
                    break;
                }
            }
        } else {
            this.inputProveedor.setSelectedItem(null);
        }
        
        Plan plan = cuentaProveedor.getPlan();
        if (plan != null) {
            Plan planIndex;
            for (int i = 0; i < this.inputPlan.getItemCount(); i++) {
                planIndex = this.inputPlan.getItemAt(i);
                if (planIndex != null && planIndex.getCodigo().equals(plan.getCodigo())) {
                    this.inputPlan.setSelectedIndex(i);
                    break;
                }
            }
        } else {
            this.inputPlan.setSelectedItem(null);
        }
        
        Producto producto = cuentaProveedor.getProducto();
        if (producto != null) {
            Producto productoIndex;
            for (int i = 0; i < this.inputProducto.getItemCount(); i++) {
                productoIndex = this.inputProducto.getItemAt(i);
                if (productoIndex != null && productoIndex.getCodigo().equals(producto.getCodigo())) {
                    this.inputProducto.setSelectedIndex(i);
                    break;
                }
            }
        } else {
            this.inputProducto.setSelectedItem(null);
        }
    }
    
    public void setProveedores(List<Proveedor> proveedores) {
        this.inputProveedor.removeAllItems();
        this.inputProveedor.addItem(null);
        for (Proveedor proveedor : proveedores) {
            this.inputProveedor.addItem(proveedor);
        }
    }
    
    public void setCuentas(List<Cuenta> cuentas) {
        this.inputCuenta.removeAllItems();
        this.inputCuenta.addItem(null);
        for (Cuenta cuenta : cuentas) {
            this.inputCuenta.addItem(cuenta);
        }
    }
    
    public void setProductos(List<Producto> productos) {
        this.inputProducto.removeAllItems();
        this.inputProducto.addItem(null);
        for (Producto producto : productos) {
            this.inputProducto.addItem(producto);
        }
    }
    
    public void setPlanes(List<Plan> planes) {
        this.inputPlan.removeAllItems();
        this.inputPlan.addItem(null);
        for (Plan plan : planes) {
            this.inputPlan.addItem(plan);
        }
    }
    
    public void setCuentasProveedores(List<CuentaProveedor> cuentasProveedores) {
        this.modelCuentasProveedores.setRowCount(0);
        Plan plan;
        Producto producto;
        for (CuentaProveedor cuentaProveedor : cuentasProveedores) {
            plan = cuentaProveedor.getPlan();
            producto = cuentaProveedor.getProducto();
            this.modelCuentasProveedores.addRow(new Object[]{
                cuentaProveedor.getId().getCodigoProveedor(),
                cuentaProveedor.getId().getCodigoCuenta(),
                plan != null ? plan.getNombre() : "",
                producto != null ? producto.getDescripcion() : ""
            });
        }
    }
    
}
